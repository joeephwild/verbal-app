import { DeployOpts, ProxyKindOption, StandaloneValidationOptions, ValidationOptions } from '@openzeppelin/upgrades-core';
import { DeploymentType } from 'zksync-ethers/build/types';
export type StandaloneOptions<TRequiredSeperateForProxy extends boolean | undefined = true | undefined> = StandaloneValidationOptions & DeployOpts & {
    constructorArgs?: unknown[];
    useDeployedImplementation?: boolean;
    provider?: any;
    factoryDeps?: string[];
} & DeploymentTypesOptions<TRequiredSeperateForProxy>;
export type DeploymentTypesOptions<TRequiredSeperateForProxy extends boolean | undefined = true | undefined> = TRequiredSeperateForProxy extends true | undefined ? {
    deploymentTypeImpl?: DeploymentType;
    deploymentTypeProxy?: DeploymentType;
    saltImpl?: string;
    saltProxy?: string;
} : {
    deploymentType?: DeploymentType;
    salt?: string;
};
export type UpgradeOptions<TRequiredSeperateForProxy extends boolean | undefined = true | undefined> = ValidationOptions & StandaloneOptions<TRequiredSeperateForProxy>;
export declare function withDefaults<TRequiredSeperateForProxy extends boolean | undefined = true | undefined>(opts?: UpgradeOptions<TRequiredSeperateForProxy>): Required<UpgradeOptions<TRequiredSeperateForProxy>>;
interface Initializer {
    initializer?: string | false;
}
export type DeployBeaconProxyOptions = ProxyKindOption & Initializer & DeploymentTypesOptions<false>;
export type DeployBeaconOptions = StandaloneOptions<false>;
export type DeployImplementationOptions = StandaloneOptions;
export type DeployProxyAdminOptions = DeployOpts;
export type DeployProxyOptions = StandaloneOptions & Initializer;
export type UpgradeBeaconOptions = UpgradeOptions<false>;
export type UpgradeProxyOptions = UpgradeOptions<false> & {
    call?: {
        fn: string;
        args?: unknown[];
    } | string;
};
export type ValidateImplementationOptions = StandaloneValidationOptions;
export {};
//# sourceMappingURL=options.d.ts.map