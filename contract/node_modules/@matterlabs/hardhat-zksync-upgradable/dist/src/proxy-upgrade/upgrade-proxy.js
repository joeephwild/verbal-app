"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeUpgradeProxy = void 0;
const zk = __importStar(require("zksync-ethers"));
const path_1 = __importDefault(require("path"));
const upgrades_core_1 = require("@openzeppelin/upgrades-core");
const chalk_1 = __importDefault(require("chalk"));
const assert_1 = __importDefault(require("assert"));
const utils_general_1 = require("../utils/utils-general");
const deploy_impl_1 = require("../proxy-deployment/deploy-impl");
const manifest_1 = require("../core/manifest");
const constants_1 = require("../constants");
function makeUpgradeProxy(hre) {
    return async function upgradeProxy(wallet, proxy, newImplementationArtifact, opts = {}, quiet = false) {
        const proxyAddress = await (0, utils_general_1.getContractAddress)(proxy);
        opts.provider = wallet.provider;
        opts.factoryDeps = await (0, utils_general_1.extractFactoryDeps)(hre, newImplementationArtifact);
        const newImplementationFactory = new zk.ContractFactory(newImplementationArtifact.abi, newImplementationArtifact.bytecode, wallet, opts.deploymentType);
        const { impl: nextImpl } = await (0, deploy_impl_1.deployProxyImpl)(hre, newImplementationFactory, opts, proxyAddress);
        const upgradeTo = await getUpgrader(proxyAddress, wallet);
        const call = encodeCall(newImplementationFactory, opts.call);
        const upgradeTx = await upgradeTo(nextImpl, call);
        if (!quiet) {
            console.info(chalk_1.default.green(`Contract successfully upgraded to ${nextImpl} with tx ${upgradeTx.hash}`));
        }
        const inst = newImplementationFactory.attach(proxyAddress);
        // @ts-ignore Won't be readonly because inst was created through attach.
        inst.deployTransaction = upgradeTx;
        return inst;
    };
    async function getUpgrader(proxyAddress, wallet) {
        const provider = wallet.provider;
        const adminAddress = await (0, upgrades_core_1.getAdminAddress)(provider, proxyAddress);
        const adminBytecode = await (0, upgrades_core_1.getCode)(provider, adminAddress);
        if ((0, upgrades_core_1.isEmptySlot)(adminAddress) || adminBytecode === '0x') {
            const TUPPath = (await hre.artifacts.getArtifactPaths()).find((x) => x.includes(path_1.default.sep + constants_1.ITUP_JSON));
            (0, assert_1.default)(TUPPath, 'Transparent upgradeable proxy artifact not found');
            const transparentUpgradeableProxyContract = await Promise.resolve(`${TUPPath}`).then(s => __importStar(require(s)));
            const transparentUpgradeableProxyFactory = new zk.ContractFactory(transparentUpgradeableProxyContract.abi, transparentUpgradeableProxyContract.bytecode, wallet);
            const proxy = transparentUpgradeableProxyFactory.attach(proxyAddress);
            return (nextImpl, call) => (call ? proxy.upgradeToAndCall(nextImpl, call) : proxy.upgradeTo(nextImpl));
        }
        else {
            const manifest = await manifest_1.Manifest.forNetwork(provider);
            const proxyAdminPath = (await hre.artifacts.getArtifactPaths()).find((x) => x.includes(path_1.default.sep + constants_1.PROXY_ADMIN_JSON));
            (0, assert_1.default)(proxyAdminPath, 'Proxy admin artifact not found');
            const proxyAdminContract = await Promise.resolve(`${proxyAdminPath}`).then(s => __importStar(require(s)));
            const proxyAdminFactory = new zk.ContractFactory(proxyAdminContract.abi, proxyAdminContract.bytecode, wallet);
            const admin = proxyAdminFactory.attach(adminAddress);
            const manifestAdmin = await manifest.getAdmin();
            if ((await admin.getAddress()) !== manifestAdmin?.address) {
                throw new Error('Proxy admin is not the one registered in the network manifest');
            }
            return (nextImpl, call) => call ? admin.upgradeAndCall(proxyAddress, nextImpl, call) : admin.upgrade(proxyAddress, nextImpl);
        }
    }
}
exports.makeUpgradeProxy = makeUpgradeProxy;
function encodeCall(factory, call) {
    if (!call) {
        return undefined;
    }
    if (typeof call === 'string') {
        call = { fn: call };
    }
    return factory.interface.encodeFunctionData(call.fn, call.args ?? []);
}
//# sourceMappingURL=upgrade-proxy.js.map