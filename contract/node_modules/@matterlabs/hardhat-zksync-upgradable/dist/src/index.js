"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
require("@matterlabs/hardhat-zksync-solc");
require("./type-extensions");
const config_env_1 = require("hardhat/internal/core/config/config-env");
const task_names_1 = require("hardhat/builtin-tasks/task-names");
const plugins_1 = require("hardhat/plugins");
const utils_general_1 = require("./utils/utils-general");
const validate_1 = require("./core/validate");
const admin_1 = require("./admin");
const task_names_2 = require("./task-names");
const task_actions_1 = require("./task-actions");
const constants_1 = require("./constants");
(0, config_env_1.extendEnvironment)((hre) => {
    hre.zkUpgrades = (0, plugins_1.lazyObject)(() => {
        const { makeDeployProxy } = require('./proxy-deployment/deploy-proxy');
        const { makeUpgradeProxy } = require('./proxy-upgrade/upgrade-proxy');
        const { makeValidateImplementation } = require('./validations/validate-implementation');
        const { makeDeployBeacon } = require('./proxy-deployment/deploy-beacon');
        const { makeDeployBeaconProxy } = require('./proxy-deployment/deploy-beacon-proxy');
        const { makeUpgradeBeacon } = require('./proxy-upgrade/upgrade-beacon');
        const { makeDeployProxyAdmin } = require('./proxy-deployment/deploy-proxy-admin');
        const { makeEstimateGasProxy } = require('./gas-estimation/estimate-gas-proxy');
        const { makeEstimateGasBeacon } = require('./gas-estimation/estimate-gas-beacon');
        const { makeEstimateGasBeaconProxy } = require('./gas-estimation/estimate-gas-beacon-proxy');
        return {
            deployProxy: makeDeployProxy(hre),
            upgradeProxy: makeUpgradeProxy(hre),
            validateImplementation: makeValidateImplementation(hre),
            deployBeacon: makeDeployBeacon(hre),
            deployBeaconProxy: makeDeployBeaconProxy(hre),
            upgradeBeacon: makeUpgradeBeacon(hre),
            deployProxyAdmin: makeDeployProxyAdmin(hre),
            admin: {
                getInstance: (0, admin_1.makeGetInstanceFunction)(hre),
                changeProxyAdmin: (0, admin_1.makeChangeProxyAdmin)(hre),
                transferProxyAdminOwnership: (0, admin_1.makeTransferProxyAdminOwnership)(hre),
            },
            estimation: {
                estimateGasProxy: makeEstimateGasProxy(hre),
                estimateGasBeacon: makeEstimateGasBeacon(hre),
                estimateGasBeaconProxy: makeEstimateGasBeaconProxy(hre),
            },
        };
    });
    hre.config.solidity.compilers.forEach((compiler) => {
        (0, utils_general_1.extendCompilerOutputSelection)(compiler);
    });
});
(0, config_env_1.task)(task_names_2.TASK_DEPLOY_ZKSYNC_BEACON, 'Runs the beaccon deploy for zkSync network')
    .addParam('contractName', 'A contract name or a FQN', '')
    .addOptionalVariadicPositionalParam('constructorArgsParams', 'Contract constructor arguments. Cannot be used if the --constructor-args option is provided', [])
    .addOptionalParam('constructorArgs', 'Path to a Javascript module that exports the constructor arguments', undefined, config_env_1.types.inputFile)
    .addOptionalParam('initializer', 'Initializer function name', undefined)
    .addOptionalParam('deploymentTypeImpl', 'Type of deployment for implementation', undefined)
    .addOptionalParam('deploymentTypeProxy', 'Type of deployment for proxy', undefined)
    .addOptionalParam('saltImpl', 'Salt for implementation deployment', undefined)
    .addOptionalParam('saltProxy', 'Salt for proxy deployment', undefined)
    .addFlag('noCompile', 'No compile flag')
    .setAction(task_actions_1.deployZkSyncBeacon);
(0, config_env_1.task)(task_names_2.TASK_DEPLOY_ZKSYNC_PROXY, 'Deploy proxy for zkSync network')
    .addParam('contractName', 'A contract name or a FQN', '')
    .addOptionalVariadicPositionalParam('constructorArgsParams', 'Contract constructor arguments. Cannot be used if the --constructor-args option is provided', [])
    .addOptionalParam('constructorArgs', 'Path to a Javascript module that exports the constructor arguments', undefined, config_env_1.types.inputFile)
    .addOptionalParam('initializer', 'Initializer function name', undefined)
    .addOptionalParam('deploymentTypeImpl', 'Type of deployment for implementation', undefined)
    .addOptionalParam('deploymentTypeProxy', 'Type of deployment for proxy', undefined)
    .addOptionalParam('saltImpl', 'Salt for implementation deployment', undefined)
    .addOptionalParam('saltProxy', 'Salt for proxy deployment', undefined)
    .addFlag('noCompile', 'No compile flag')
    .setAction(task_actions_1.deployZkSyncProxy);
(0, config_env_1.task)(task_names_2.TASK_UPGRADE_ZKSYNC_BEACON, 'Runs the beacon upgrade for zkSync network')
    .addParam('contractName', 'A contract name or a FQN', '')
    .addParam('beaconAddress', 'Beacon address of the deployed contract', '')
    .addOptionalParam('deploymentType', 'Type of deployment', undefined)
    .addOptionalParam('salt', 'Salt for deployment', undefined)
    .addFlag('noCompile', 'No compile flag')
    .setAction(task_actions_1.upgradeZkSyncBeacon);
(0, config_env_1.task)(task_names_2.TASK_UPGRADE_ZKSYNC_PROXY, 'Runs the proxy upgrade for zkSync network')
    .addParam('contractName', 'A contract name or a FQN', '')
    .addParam('proxyAddress', 'Proxy address of the deployed contract', '')
    .addOptionalParam('deploymentType', 'Type of deployment', undefined)
    .addOptionalParam('salt', 'Salt for deployment', undefined)
    .addFlag('noCompile', 'No compile flag')
    .setAction(task_actions_1.upgradeZkSyncProxy);
(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_COMPILE, async (args, hre, runSuper) => {
    const { solcInputOutputDecoder } = await Promise.resolve().then(() => __importStar(require('@openzeppelin/upgrades-core')));
    const { writeValidations } = await Promise.resolve().then(() => __importStar(require('./validations/validations')));
    const { output, solcBuild } = await runSuper();
    if ((0, utils_general_1.isFullZkSolcOutput)(output)) {
        const decodeSrc = solcInputOutputDecoder(args.input, output);
        const validations = (0, validate_1.validate)(output, decodeSrc, args.solcVersion);
        await writeValidations(hre, validations);
    }
    return { output, solcBuild };
});
(0, config_env_1.subtask)(task_names_1.TASK_COMPILE_SOLIDITY_GET_SOURCE_NAMES, async (args, _, runSuper) => {
    const sourceNames = await runSuper();
    return [...sourceNames, ...constants_1.PROXY_SOURCE_NAMES];
});
(0, config_env_1.subtask)('verify:verify').setAction(async (args, hre, runSuper) => {
    const { verify } = await Promise.resolve().then(() => __importStar(require('./verify/verify-proxy')));
    return await verify(args, hre, runSuper);
});
__exportStar(require("./type-extensions"), exports);
//# sourceMappingURL=index.js.map