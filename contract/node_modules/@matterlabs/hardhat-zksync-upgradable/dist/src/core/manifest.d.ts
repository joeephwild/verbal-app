import type { Deployment } from '@openzeppelin/upgrades-core/src/deployment';
import type { StorageLayout } from '@openzeppelin/upgrades-core/src/storage';
import * as zk from 'zksync-ethers';
import { ZkSyncUpgradablePluginError } from '../errors';
export interface ManifestData {
    manifestVersion: string;
    impls: {
        [version in string]?: ImplDeployment;
    };
    proxies: ProxyDeployment[];
    admin?: Deployment;
}
export interface ImplDeployment extends Deployment {
    layout: StorageLayout;
    allAddresses?: string[];
}
export interface ProxyDeployment extends Deployment {
    kind: 'uups' | 'transparent' | 'beacon';
}
export declare class DeploymentNotFound extends ZkSyncUpgradablePluginError {
}
export declare class Manifest {
    private readonly chainId;
    private readonly file;
    private readonly dir;
    private readonly chainIdSuffix;
    private readonly parent?;
    private locked;
    static forNetwork(provider: zk.Provider): Promise<Manifest>;
    constructor(chainId: number);
    getAdmin(): Promise<Deployment | undefined>;
    getDeploymentFromAddress(address: string): Promise<ImplDeployment>;
    getProxyFromAddress(address: string): Promise<ProxyDeployment>;
    addProxy(proxy: ProxyDeployment): Promise<void>;
    private _readFile;
    private _writeFile;
    read(retries?: number): Promise<ManifestData>;
    write(data: ManifestData): Promise<void>;
    lockedRun<T>(cb: () => Promise<T>): Promise<T>;
    private _lock;
}
export declare function migrateManifest(data: ManifestData): ManifestData;
export declare function normalizeManifestData(input: ManifestData): ManifestData;
//# sourceMappingURL=manifest.d.ts.map