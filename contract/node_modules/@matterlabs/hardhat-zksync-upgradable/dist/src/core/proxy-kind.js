"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.detectProxyKind = exports.processProxyKind = exports.setProxyKind = void 0;
const upgrades_core_1 = require("@openzeppelin/upgrades-core");
const errors_1 = require("../errors");
const manifest_1 = require("./manifest");
async function setProxyKind(provider, proxyAddress, opts) {
    const manifest = await manifest_1.Manifest.forNetwork(provider);
    const manifestDeployment = await manifest.getProxyFromAddress(proxyAddress).catch((e) => {
        if (e instanceof manifest_1.DeploymentNotFound) {
            return undefined;
        }
        else {
            throw e;
        }
    });
    if (opts.kind === undefined) {
        opts.kind = manifestDeployment?.kind ?? 'transparent';
    }
    else if (manifestDeployment && opts.kind !== manifestDeployment.kind) {
        throw new errors_1.ZkSyncUpgradablePluginError(`Requested an upgrade of kind ${opts.kind} but proxy is ${manifestDeployment.kind}`);
    }
    return opts.kind;
}
exports.setProxyKind = setProxyKind;
async function processProxyKind(provider, proxyAddress, opts, data, version) {
    if (opts.kind === undefined) {
        if (proxyAddress !== undefined && (await (0, upgrades_core_1.isBeaconProxy)(provider, proxyAddress))) {
            opts.kind = 'beacon';
        }
        else {
            opts.kind = (0, upgrades_core_1.inferProxyKind)(data, version);
        }
    }
    if (proxyAddress !== undefined) {
        await setProxyKind(provider, proxyAddress, opts);
    }
    if (opts.kind === 'beacon') {
        throw new upgrades_core_1.BeaconProxyUnsupportedError();
    }
}
exports.processProxyKind = processProxyKind;
async function detectProxyKind(provider, proxyAddress) {
    let importKind;
    if (await (0, upgrades_core_1.isTransparentProxy)(provider, proxyAddress)) {
        importKind = 'transparent';
    }
    else if (await (0, upgrades_core_1.isTransparentOrUUPSProxy)(provider, proxyAddress)) {
        importKind = 'uups';
    }
    else if (await (0, upgrades_core_1.isBeaconProxy)(provider, proxyAddress)) {
        importKind = 'beacon';
    }
    else {
        throw new errors_1.ZkSyncUpgradablePluginError(`Contract at ${proxyAddress} doesn't look like an ERC 1967 proxy`);
    }
    return importKind;
}
exports.detectProxyKind = detectProxyKind;
//# sourceMappingURL=proxy-kind.js.map