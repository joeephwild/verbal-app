import { SolcOutput, ValidationRunData } from '@openzeppelin/upgrades-core';
import { SrcDecoder } from '@openzeppelin/upgrades-core/src/src-decoder';
export type ValidationError = ValidationErrorConstructor | ValidationErrorOpcode | ValidationErrorWithName | ValidationErrorUpgradeability;
declare const errorKinds: readonly ["state-variable-assignment", "state-variable-immutable", "struct-definition", "enum-definition", "constructor", "delegatecall", "missing-public-upgradeto"];
interface ValidationErrorBase {
    src: string;
    kind: (typeof errorKinds)[number];
}
interface ValidationErrorWithName extends ValidationErrorBase {
    name: string;
    kind: 'state-variable-assignment' | 'state-variable-immutable' | 'struct-definition' | 'enum-definition';
}
interface ValidationErrorConstructor extends ValidationErrorBase {
    kind: 'constructor';
    contract: string;
}
interface ValidationErrorOpcode extends ValidationErrorBase {
    kind: 'delegatecall';
}
interface ValidationErrorUpgradeability extends ValidationErrorBase {
    kind: 'missing-public-upgradeto';
}
export declare function validate(solcOutput: SolcOutput, decodeSrc: SrcDecoder, solcVersion?: string): ValidationRunData;
/**
 * Get args from the doc string matching the given tag
 */
export declare function getAnnotationArgs(doc: string, tag: string): string[];
export {};
//# sourceMappingURL=validate.d.ts.map