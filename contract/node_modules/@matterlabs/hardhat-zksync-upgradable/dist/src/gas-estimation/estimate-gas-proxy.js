"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeEstimateGasProxy = void 0;
const ethers = __importStar(require("ethers"));
const chalk_1 = __importDefault(require("chalk"));
const assert_1 = __importDefault(require("assert"));
const path_1 = __importDefault(require("path"));
const errors_1 = require("../errors");
const utils_general_1 = require("../utils/utils-general");
const provider_1 = require("../core/provider");
const constants_1 = require("../constants");
const deploy_proxy_admin_1 = require("../proxy-deployment/deploy-proxy-admin");
function makeEstimateGasProxy(hre) {
    return async function estimateGasProxy(deployer, artifact, args = [], opts = {}, quiet = false) {
        let totalGasCost;
        const mockArtifact = await (0, deploy_proxy_admin_1.getAdminArtifact)(hre);
        const kind = opts.kind;
        const chainId = await (0, provider_1.getChainId)(deployer.zkWallet.provider);
        if (!chainId) {
            throw new errors_1.ZkSyncUpgradablePluginError(`Chain id ${chainId} is not supported!`);
        }
        const mockImplAddress = await getProxyAdminContractAddress();
        const data = (0, utils_general_1.getInitializerData)(new ethers.Interface(mockArtifact.abi), args, opts.initializer);
        const implGasCost = await deployer.estimateDeployFee(artifact, []);
        if (!quiet) {
            console.info(chalk_1.default.cyan(`Deployment of the implementation contract is estimated to cost: ${(0, utils_general_1.convertGasPriceToEth)(implGasCost)} ETH`));
        }
        switch (kind) {
            case 'beacon': {
                throw new errors_1.ZkSyncUpgradablePluginError(`Beacon proxy is not supported!`);
            }
            case 'uups': {
                const uupsGasCost = await estimateGasUUPS(hre, deployer, mockImplAddress, data, quiet);
                totalGasCost = implGasCost + uupsGasCost;
                break;
            }
            case 'transparent': {
                const { adminGasCost, proxyGasCost } = await estimateGasTransparent(hre, deployer, mockImplAddress, data, quiet);
                totalGasCost = implGasCost + adminGasCost + proxyGasCost;
                break;
            }
            default: {
                throw new errors_1.ZkSyncUpgradablePluginError(`Unknown proxy kind: ${kind}`);
            }
        }
        if (!quiet) {
            console.info(chalk_1.default.cyan(`Total deployment cost is estimated to cost: ${(0, utils_general_1.convertGasPriceToEth)(totalGasCost)} ETH`));
        }
        return totalGasCost;
    };
    async function getProxyAdminContractAddress() {
        // return deployer contract address since it is used only for estimating gas as admin contract
        return '0x0000000000000000000000000000000000008006';
    }
}
exports.makeEstimateGasProxy = makeEstimateGasProxy;
async function estimateGasUUPS(hre, deployer, mockImplAddress, data, quiet = false) {
    const ERC1967ProxyPath = (await hre.artifacts.getArtifactPaths()).find((x) => x.includes(path_1.default.sep + constants_1.ERC1967_PROXY_JSON));
    (0, assert_1.default)(ERC1967ProxyPath, 'ERC1967Proxy artifact not found');
    const proxyContract = await Promise.resolve(`${ERC1967ProxyPath}`).then(s => __importStar(require(s)));
    try {
        const uupsGasCost = await deployer.estimateDeployFee(proxyContract, [mockImplAddress, data]);
        if (!quiet) {
            console.info(chalk_1.default.cyan(`Deployment of the UUPS proxy contract is estimated to cost: ${(0, utils_general_1.convertGasPriceToEth)(uupsGasCost)} ETH`));
        }
        return uupsGasCost;
    }
    catch (error) {
        throw new errors_1.ZkSyncUpgradablePluginError(`Error estimating gas cost: ${error.reason}`);
    }
}
async function estimateGasTransparent(hre, deployer, mockImplAddress, data, quiet = false) {
    const adminArtifact = await (0, deploy_proxy_admin_1.getAdminArtifact)(hre);
    const adminGasCost = await deployer.estimateDeployFee(adminArtifact, []);
    let proxyGasCost;
    if (!quiet) {
        console.info(chalk_1.default.cyan(`Deployment of the admin proxy contract is estimated to cost: ${(0, utils_general_1.convertGasPriceToEth)(adminGasCost)} ETH`));
    }
    const TUPPath = (await hre.artifacts.getArtifactPaths()).find((x) => x.includes(path_1.default.sep + constants_1.TUP_JSON));
    (0, assert_1.default)(TUPPath, 'TUP artifact not found');
    const TUPContract = await Promise.resolve(`${TUPPath}`).then(s => __importStar(require(s)));
    try {
        proxyGasCost = await deployer.estimateDeployFee(TUPContract, [mockImplAddress, mockImplAddress, data]);
        if (!quiet) {
            console.info(chalk_1.default.cyan(`Deployment of the transparent proxy contract is estimated to cost: ${(0, utils_general_1.convertGasPriceToEth)(proxyGasCost)} ETH`));
        }
    }
    catch (error) {
        throw new errors_1.ZkSyncUpgradablePluginError(`Error estimating gas cost: ${error.reason}`);
    }
    return { adminGasCost, proxyGasCost };
}
//# sourceMappingURL=estimate-gas-proxy.js.map