"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeEstimateGasBeaconProxy = void 0;
const chalk_1 = __importDefault(require("chalk"));
const assert_1 = __importDefault(require("assert"));
const path_1 = __importDefault(require("path"));
const errors_1 = require("../errors");
const utils_general_1 = require("../utils/utils-general");
const constants_1 = require("../constants");
const estimate_gas_beacon_1 = require("./estimate-gas-beacon");
function makeEstimateGasBeaconProxy(hre) {
    return async function estimateGasBeaconProxy(deployer, args = [], opts = {}, quiet = false) {
        const { mockedBeaconAddress, data } = await (0, estimate_gas_beacon_1.getMockedBeaconData)(deployer, hre, args, opts);
        const beaconProxyPath = (await hre.artifacts.getArtifactPaths()).find((artifactPath) => artifactPath.includes(path_1.default.sep + constants_1.BEACON_PROXY_JSON));
        (0, assert_1.default)(beaconProxyPath, 'Beacon proxy artifact not found');
        const beaconProxyContract = await Promise.resolve(`${beaconProxyPath}`).then(s => __importStar(require(s)));
        try {
            const beaconProxyGasCost = await deployer.estimateDeployFee(beaconProxyContract, [
                mockedBeaconAddress,
                data,
            ]);
            if (!quiet) {
                console.info(chalk_1.default.cyan(`Deployment of the beacon proxy contract is estimated to cost: ${(0, utils_general_1.convertGasPriceToEth)(beaconProxyGasCost)} ETH`));
                console.info(chalk_1.default.cyan(`Total estimated gas cost: ${(0, utils_general_1.convertGasPriceToEth)(beaconProxyGasCost)} ETH`));
            }
            return beaconProxyGasCost;
        }
        catch (error) {
            throw new errors_1.ZkSyncUpgradablePluginError(`Error estimating gas cost: ${error.reason}`);
        }
    };
}
exports.makeEstimateGasBeaconProxy = makeEstimateGasBeaconProxy;
//# sourceMappingURL=estimate-gas-beacon-proxy.js.map