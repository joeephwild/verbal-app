"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeDeployBeaconProxy = void 0;
const upgrades_core_1 = require("@openzeppelin/upgrades-core");
const zk = __importStar(require("zksync-ethers"));
const chalk_1 = __importDefault(require("chalk"));
const assert_1 = __importDefault(require("assert"));
const path_1 = __importDefault(require("path"));
const utils_general_1 = require("../utils/utils-general");
const constants_1 = require("../constants");
const errors_1 = require("../errors");
const manifest_1 = require("../core/manifest");
const deploy_1 = require("./deploy");
function makeDeployBeaconProxy(hre) {
    return async function deployBeaconProxy(wallet, beacon, artifact, args = [], opts = {}, quiet = false) {
        const attachTo = new zk.ContractFactory(artifact.abi, artifact.bytecode, wallet);
        if (!(attachTo instanceof zk.ContractFactory)) {
            throw new errors_1.ZkSyncUpgradablePluginError(`attachTo must specify a contract factory\n` +
                `Include the contract factory for the beacon's current implementation in the attachTo parameter`);
        }
        if (!Array.isArray(args)) {
            opts = args;
            args = [];
        }
        const manifest = await manifest_1.Manifest.forNetwork(wallet.provider);
        if (opts.kind !== undefined && opts.kind !== 'beacon') {
            throw new upgrades_core_1.DeployBeaconProxyKindError(opts.kind);
        }
        opts.kind = 'beacon';
        const beaconAddress = await (0, utils_general_1.getContractAddress)(beacon);
        if (!(await (0, upgrades_core_1.isBeacon)(wallet.provider, beaconAddress))) {
            throw new upgrades_core_1.DeployBeaconProxyUnsupportedError(beaconAddress);
        }
        const data = (0, utils_general_1.getInitializerData)(attachTo.interface, args, opts.initializer);
        if (await manifest.getAdmin()) {
            if (!quiet) {
                console.info(chalk_1.default.yellow(`A proxy admin was previously deployed on this network`, [
                    `This is not natively used with the current kind of proxy ('beacon').`,
                    `Changes to the admin will have no effect on this new proxy.`,
                ]));
            }
        }
        const beaconProxyPath = (await hre.artifacts.getArtifactPaths()).find((artifactPath) => artifactPath.includes(path_1.default.sep + constants_1.BEACON_PROXY_JSON));
        (0, assert_1.default)(beaconProxyPath, 'Beacon proxy artifact not found');
        const beaconProxyContract = await Promise.resolve(`${beaconProxyPath}`).then(s => __importStar(require(s)));
        const beaconProxyFactory = new zk.ContractFactory(beaconProxyContract.abi, beaconProxyContract.bytecode, wallet, opts.deploymentType);
        const proxyDeployment = {
            kind: opts.kind,
            ...(await (0, deploy_1.deploy)(beaconProxyFactory, beaconAddress, data, {
                customData: {
                    salt: opts.salt,
                },
            })),
        };
        if (!quiet) {
            console.info(chalk_1.default.green('Beacon proxy deployed at: ', proxyDeployment.address));
        }
        await manifest.addProxy(proxyDeployment);
        const inst = attachTo.attach(proxyDeployment.address);
        // @ts-ignore Won't be readonly because inst was created through attach.
        inst.deployTransaction = proxyDeployment.deployTransaction;
        return inst;
    };
}
exports.makeDeployBeaconProxy = makeDeployBeaconProxy;
//# sourceMappingURL=deploy-beacon-proxy.js.map