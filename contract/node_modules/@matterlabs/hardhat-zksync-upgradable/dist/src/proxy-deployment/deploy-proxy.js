"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeDeployProxy = void 0;
const zk = __importStar(require("zksync-ethers"));
const chalk_1 = __importDefault(require("chalk"));
const path_1 = __importDefault(require("path"));
const upgrades_core_1 = require("@openzeppelin/upgrades-core");
const assert_1 = __importDefault(require("assert"));
const utils_general_1 = require("../utils/utils-general");
const constants_1 = require("../constants");
const manifest_1 = require("../core/manifest");
const errors_1 = require("../errors");
const deploy_impl_1 = require("./deploy-impl");
const deploy_1 = require("./deploy");
function makeDeployProxy(hre) {
    return async function deployProxy(wallet, artifact, args = [], opts = {}, quiet = false) {
        if (!Array.isArray(args)) {
            opts = args;
            args = [];
        }
        opts.provider = wallet.provider;
        opts.factoryDeps = await (0, utils_general_1.extractFactoryDeps)(hre, artifact);
        const manifest = await manifest_1.Manifest.forNetwork(wallet.provider);
        const factory = new zk.ContractFactory(artifact.abi, artifact.bytecode, wallet, opts.deploymentTypeImpl);
        const { impl, kind } = await (0, deploy_impl_1.deployProxyImpl)(hre, factory, opts);
        if (!quiet) {
            console.info(chalk_1.default.green(`Implementation contract was deployed to ${impl}`));
        }
        const data = (0, utils_general_1.getInitializerData)(factory.interface, args, opts.initializer);
        const customDataProxy = {
            customData: {
                salt: opts.saltProxy,
            },
        };
        if (kind === 'uups') {
            if (await manifest.getAdmin()) {
                if (!quiet) {
                    console.info(chalk_1.default.yellow(`A proxy admin was previously deployed on this network\nThis is not natively used with the current kind of proxy ('uups')\nChanges to the admin will have no effect on this new proxy`));
                }
            }
        }
        let proxyDeployment;
        switch (kind) {
            case 'beacon': {
                throw new upgrades_core_1.BeaconProxyUnsupportedError();
            }
            case 'uups': {
                const ERC1967ProxyPath = (await hre.artifacts.getArtifactPaths()).find((x) => x.includes(path_1.default.sep + constants_1.ERC1967_PROXY_JSON));
                (0, assert_1.default)(ERC1967ProxyPath, 'ERC1967Proxy artifact not found');
                const proxyContract = await Promise.resolve(`${ERC1967ProxyPath}`).then(s => __importStar(require(s)));
                const proxyFactory = new zk.ContractFactory(proxyContract.abi, proxyContract.bytecode, wallet, opts.deploymentTypeProxy);
                proxyDeployment = { kind, ...(await (0, deploy_1.deploy)(proxyFactory, impl, data, customDataProxy)) };
                if (!quiet) {
                    console.info(chalk_1.default.green(`UUPS proxy was deployed to ${proxyDeployment.address}`));
                }
                break;
            }
            case 'transparent': {
                const adminAddress = await hre.zkUpgrades.deployProxyAdmin(wallet, {});
                if (!quiet) {
                    console.info(chalk_1.default.green(`Admin was deployed to ${adminAddress}`));
                }
                const TUPPath = (await hre.artifacts.getArtifactPaths()).find((x) => x.includes(path_1.default.sep + constants_1.TUP_JSON));
                (0, assert_1.default)(TUPPath, 'TUP artifact not found');
                const TUPContract = await Promise.resolve(`${TUPPath}`).then(s => __importStar(require(s)));
                const TUPFactory = new zk.ContractFactory(TUPContract.abi, TUPContract.bytecode, wallet, opts.deploymentTypeProxy);
                proxyDeployment = { kind, ...(await (0, deploy_1.deploy)(TUPFactory, impl, adminAddress, data, customDataProxy)) };
                if (!quiet) {
                    console.info(chalk_1.default.green(`Transparent proxy was deployed to ${proxyDeployment.address}`));
                }
                break;
            }
            default: {
                throw new errors_1.ZkSyncUpgradablePluginError(`Unknown proxy kind: ${kind}`);
            }
        }
        await manifest.addProxy(proxyDeployment);
        const inst = factory.attach(proxyDeployment.address);
        // @ts-ignore Won't be readonly because inst was created through attach.
        inst.deployTransaction = proxyDeployment.deployTransaction;
        return inst;
    };
}
exports.makeDeployProxy = makeDeployProxy;
//# sourceMappingURL=deploy-proxy.js.map