"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.upgradeProxy = exports.upgradeBeacon = exports.deployProxy = exports.deployBeacon = void 0;
const deployer_1 = require("@matterlabs/hardhat-zksync-deploy/dist/deployer");
const utils_1 = require("@matterlabs/hardhat-zksync-deploy/dist/utils");
const task_names_1 = require("hardhat/builtin-tasks/task-names");
const utils_2 = require("./utils");
async function deployBeacon(hre, taskArgs) {
    if (!taskArgs.noCompile) {
        await hre.run(task_names_1.TASK_COMPILE);
    }
    const constructorArguments = await (0, utils_1.getConstructorArguments)(taskArgs.constructorArgsParams, taskArgs.constructorArgs);
    const wallet = await (0, utils_2.getWallet)(hre);
    const deployer = new deployer_1.Deployer(hre, wallet);
    const contract = await deployer.loadArtifact(taskArgs.contractName);
    const beacon = await hre.zkUpgrades.deployBeacon(wallet, contract, {
        deploymentType: taskArgs.deploymentTypeImpl,
        salt: taskArgs.saltImpl,
    });
    await beacon.waitForDeployment();
    const proxy = await hre.zkUpgrades.deployBeaconProxy(deployer.zkWallet, await beacon.getAddress(), contract, constructorArguments, {
        deploymentType: taskArgs.deploymentTypeProxy,
        salt: taskArgs.saltProxy,
        initializer: taskArgs.initializer,
    });
    await proxy.waitForDeployment();
    return {
        proxy,
        beacon,
    };
}
exports.deployBeacon = deployBeacon;
async function deployProxy(hre, taskArgs) {
    if (!taskArgs.noCompile) {
        await hre.run(task_names_1.TASK_COMPILE);
    }
    const constructorArguments = await (0, utils_1.getConstructorArguments)(taskArgs.constructorArgsParams, taskArgs.constructorArgs);
    const wallet = await (0, utils_2.getWallet)(hre);
    const deployer = new deployer_1.Deployer(hre, wallet);
    const contract = await deployer.loadArtifact(taskArgs.contractName);
    const proxy = await hre.zkUpgrades.deployProxy(wallet, contract, constructorArguments, {
        deploymentTypeImpl: taskArgs.deploymentTypeImpl,
        saltImpl: taskArgs.saltImpl,
        deploymentTypeProxy: taskArgs.deploymentTypeProxy,
        saltProxy: taskArgs.saltProxy,
        initializer: taskArgs.initializer,
    });
    await proxy.waitForDeployment();
    return proxy;
}
exports.deployProxy = deployProxy;
async function upgradeBeacon(hre, taskArgs) {
    if (!taskArgs.noCompile) {
        await hre.run(task_names_1.TASK_COMPILE);
    }
    const wallet = await (0, utils_2.getWallet)(hre);
    const deployer = new deployer_1.Deployer(hre, wallet);
    const contractV2 = await deployer.loadArtifact(taskArgs.contractName);
    const beaconUpgrade = await hre.zkUpgrades.upgradeBeacon(wallet, taskArgs.beaconAddress, contractV2, {
        deploymentType: taskArgs.deploymentType,
        salt: taskArgs.salt,
    });
    await beaconUpgrade.waitForDeployment();
    return beaconUpgrade;
}
exports.upgradeBeacon = upgradeBeacon;
async function upgradeProxy(hre, taskArgs) {
    if (!taskArgs.noCompile) {
        await hre.run(task_names_1.TASK_COMPILE);
    }
    const wallet = await (0, utils_2.getWallet)(hre);
    const deployer = new deployer_1.Deployer(hre, wallet);
    const contractV2 = await deployer.loadArtifact(taskArgs.contractName);
    const proxyUpgrade = await hre.zkUpgrades.upgradeProxy(wallet, taskArgs.proxyAddress, contractV2, {
        deploymentType: taskArgs.deploymentType,
        salt: taskArgs.salt,
    });
    await proxyUpgrade.waitForDeployment();
    return proxyUpgrade;
}
exports.upgradeProxy = upgradeProxy;
//# sourceMappingURL=plugin.js.map