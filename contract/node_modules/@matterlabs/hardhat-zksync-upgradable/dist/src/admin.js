"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getManifestAdmin = exports.makeGetInstanceFunction = exports.makeTransferProxyAdminOwnership = exports.makeChangeProxyAdmin = void 0;
const chalk_1 = __importDefault(require("chalk"));
const upgrades_core_1 = require("@openzeppelin/upgrades-core");
const manifest_1 = require("./core/manifest");
const deploy_proxy_admin_1 = require("./proxy-deployment/deploy-proxy-admin");
const errors_1 = require("./errors");
function makeChangeProxyAdmin(hre) {
    return async function changeProxyAdmin(proxyAddress, newAdmin, wallet) {
        const proxyAdminManifest = await getManifestAdmin(hre, wallet);
        const proxyAdminAddress = await (0, upgrades_core_1.getAdminAddress)(wallet.provider, proxyAddress);
        if ((await proxyAdminManifest.getAddress()) !== proxyAdminAddress) {
            throw new errors_1.ZkSyncUpgradablePluginError('Proxy admin is not the one registered in the network manifest');
        }
        else if ((await proxyAdminManifest.getAddress()) !== newAdmin) {
            await proxyAdminManifest.changeProxyAdmin(proxyAddress, newAdmin);
        }
    };
}
exports.makeChangeProxyAdmin = makeChangeProxyAdmin;
function makeTransferProxyAdminOwnership(hre) {
    return async function transferProxyAdminOwnership(newOwner, wallet) {
        const admin = await getManifestAdmin(hre, wallet);
        await admin.transferOwnership(newOwner);
        const manifest = await manifest_1.Manifest.forNetwork(wallet.provider);
        const { proxies } = await manifest.read();
        for (const { address, kind } of proxies) {
            if ((await admin.getAddress()) === (await (0, upgrades_core_1.getAdminAddress)(wallet.provider, address))) {
                console.info(chalk_1.default.green(`${address} (${kind}) proxy ownership transfered through admin proxy`));
            }
            else {
                console.info(chalk_1.default.red(`${address} (${kind}) proxy ownership not affected by admin proxy`));
            }
        }
    };
}
exports.makeTransferProxyAdminOwnership = makeTransferProxyAdminOwnership;
function makeGetInstanceFunction(hre) {
    return async function getInstance(wallet) {
        return await getManifestAdmin(hre, wallet);
    };
}
exports.makeGetInstanceFunction = makeGetInstanceFunction;
async function getManifestAdmin(hre, wallet) {
    const manifest = await manifest_1.Manifest.forNetwork(wallet.provider);
    const manifestAdmin = await manifest.getAdmin();
    const proxyAdminAddress = manifestAdmin?.address;
    if (proxyAdminAddress === undefined) {
        throw new errors_1.ZkSyncUpgradablePluginError('No ProxyAdmin was found in the network manifest');
    }
    const adminFactory = await (0, deploy_proxy_admin_1.getAdminFactory)(hre, wallet);
    return adminFactory.attach(proxyAdminAddress);
}
exports.getManifestAdmin = getManifestAdmin;
//# sourceMappingURL=admin.js.map