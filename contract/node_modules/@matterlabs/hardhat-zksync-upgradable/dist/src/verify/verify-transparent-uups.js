"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fullVerifyTransparentOrUUPS = void 0;
const upgrades_core_1 = require("@openzeppelin/upgrades-core");
const zk = __importStar(require("zksync-ethers"));
const chalk_1 = __importDefault(require("chalk"));
const constants_1 = require("../constants");
const verify_impl_1 = require("./verify-impl");
const verify_proxy_1 = require("./verify-proxy");
/**
 * Fully verifies all contracts related to the given transparent or UUPS proxy address: implementation, admin (if any), and proxy.
 *
 * This function will determine whether the address is a transparent or UUPS proxy based on whether its creation bytecode matches with
 * TransparentUpgradeableProxy or ERC1967Proxy.
 *
 * Note: this function does not use the admin slot to determine whether the proxy is transparent or UUPS, but will always verify
 * the admin address as long as the admin storage slot has an address.
 *
 * @param hre The hardhat runtime environment
 * @param proxyAddress The transparent or UUPS proxy address
 * @param hardhatVerify A function that invokes the verify plugin's verify command
 * @param runSuper A function that invokes the verify plugin's verify command
 */
async function fullVerifyTransparentOrUUPS(hre, proxyAddress, hardhatVerify, runSuper, noCompile = false, quiet = false) {
    const networkConfig = hre.network.config;
    const provider = new zk.Provider(networkConfig.url);
    const implAddress = await (0, upgrades_core_1.getImplementationAddress)(provider, proxyAddress);
    await (0, verify_impl_1.verifyImplementation)(hardhatVerify, implAddress);
    await verifyTransparentOrUUPS();
    await verifyAdmin();
    async function verifyAdmin() {
        const adminAddress = await (0, upgrades_core_1.getAdminAddress)(provider, proxyAddress);
        if (!(0, upgrades_core_1.isEmptySlot)(adminAddress)) {
            if (!quiet) {
                console.info(chalk_1.default.cyan(`Verifying proxy admin: ${adminAddress}`));
            }
            try {
                await (0, verify_proxy_1.verifyWithArtifact)(hre, adminAddress, [constants_1.verifiableContracts.proxyAdmin], runSuper, noCompile);
            }
            catch (e) {
                console.error(chalk_1.default.red(`Error verifying proxy admin: ${e.message}`));
            }
        }
    }
    async function verifyTransparentOrUUPS() {
        if (!quiet) {
            console.info(chalk_1.default.cyan(`Verifying proxy: ${proxyAddress}`));
        }
        await (0, verify_proxy_1.verifyWithArtifact)(hre, proxyAddress, [constants_1.verifiableContracts.transparentUpgradeableProxy, constants_1.verifiableContracts.erc1967proxy], runSuper, noCompile);
    }
}
exports.fullVerifyTransparentOrUUPS = fullVerifyTransparentOrUUPS;
//# sourceMappingURL=verify-transparent-uups.js.map