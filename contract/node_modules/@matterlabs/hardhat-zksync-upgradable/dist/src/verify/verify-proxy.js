"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyWithArtifact = exports.verify = void 0;
const upgrades_core_1 = require("@openzeppelin/upgrades-core");
const chalk_1 = __importDefault(require("chalk"));
const zk = __importStar(require("zksync-ethers"));
const ethers_1 = require("ethers");
const constants_1 = require("../constants");
const utils_general_1 = require("../utils/utils-general");
const errors_1 = require("../errors");
const verify_transparent_uups_1 = require("./verify-transparent-uups");
const verify_beacon_1 = require("./verify-beacon");
/**
 * Overrides verify's plugin `verify:verify` subtask to fully verify a proxy or beacon.
 *
 * Verifies the contract at an address. If the address is an ERC-1967 compatible proxy, verifies the proxy and associated proxy contracts,
 * as well as the implementation. Otherwise, calls verify function directly.
 *
 */
async function verify(args, hre, runSuper) {
    if (!runSuper.isDefined) {
        throw new errors_1.ZkSyncUpgradablePluginError(constants_1.UPGRADE_VERIFY_ERROR);
    }
    const networkConfig = hre.network.config;
    const provider = new zk.Provider(networkConfig.url);
    const proxyAddress = args.address;
    if (await (0, upgrades_core_1.isTransparentOrUUPSProxy)(provider, proxyAddress)) {
        await (0, verify_transparent_uups_1.fullVerifyTransparentOrUUPS)(hre, proxyAddress, hardhatZkSyncVerify, runSuper, args.noCompile);
    }
    else if (await (0, upgrades_core_1.isBeaconProxy)(provider, proxyAddress)) {
        await (0, verify_beacon_1.fullVerifyBeaconProxy)(hre, proxyAddress, hardhatZkSyncVerify, runSuper, args.noCompile);
    }
    else if (await (0, upgrades_core_1.isBeacon)(provider, proxyAddress)) {
        await (0, verify_beacon_1.fullVerifyBeacon)(hre, proxyAddress, hardhatZkSyncVerify, runSuper, args.noCompile);
    }
    else {
        return hardhatZkSyncVerify(proxyAddress);
    }
    async function hardhatZkSyncVerify(address) {
        return await runSuper({ ...args, address });
    }
}
exports.verify = verify;
/**
 * Looks for any of the possible events (in array order) at the specified address,
 * and returns the corresponding txHash for the first event found.
 *
 * @param address The contract address for which to look for events
 * @param possibleContractInfo An array of possible corresponding creation event expected in the logs.
 * @returns the xHash for the first event found
 */
async function searchEvent(provider, address, possibleContractInfo) {
    for (const contractInfo of possibleContractInfo) {
        const txHash = await (0, utils_general_1.getContractCreationTxHash)(provider, address, contractInfo.event);
        if (txHash !== undefined) {
            return { contractInfo, txHash };
        }
    }
    const events = possibleContractInfo.map((contractInfo) => {
        return contractInfo.event;
    });
    throw new errors_1.ZkSyncUpgradablePluginError((0, constants_1.EVENT_NOT_FOUND_ERROR)(address, events));
}
async function verifyWithArtifact(hre, address, possibleContractInfo, runSuper, noCompile) {
    try {
        await attemptVerifyWithCreationEvent(hre, address, possibleContractInfo, runSuper, noCompile);
        return true;
    }
    catch (fallbackError) {
        if (fallbackError.message.toLowerCase().includes('already verified')) {
            console.error(chalk_1.default.red(`Contract at ${address} already verified.`));
        }
        else {
            console.error(chalk_1.default.red(fallbackError.message));
            return;
        }
    }
}
exports.verifyWithArtifact = verifyWithArtifact;
/**
 * Attempts to verify a contract by looking up an event that should have been logged during contract construction,
 * finds the txHash for that, and infers the constructor args to use for verification.
 *
 * Iterates through each element of possibleContractInfo to look for that element's event, until an event is found.
 *
 * @param hre The hardhat runtime environment
 * @param address The contract address to verify
 * @param possibleContractInfo An array of possible contract artifacts to use for verification along
 *  with the corresponding creation event expected in the logs.
 * @param runSuper The runSuper function from the plugin
 */
async function attemptVerifyWithCreationEvent(hre, address, possibleContractInfo, runSuper, noCompile) {
    const networkConfig = hre.network.config;
    const provider = new zk.Provider(networkConfig.url);
    const { txHash } = await searchEvent(provider, address, possibleContractInfo);
    const tx = await (0, upgrades_core_1.getTransactionByHash)(provider, txHash);
    if (tx === null) {
        throw new errors_1.ZkSyncUpgradablePluginError(`The transaction hash ${txHash} from the contract's logs was not found on the network`);
    }
    const decodedInputData = ethers_1.ethers.AbiCoder.defaultAbiCoder().decode(['bytes32', 'bytes32', 'bytes'], ethers_1.ethers.dataSlice(tx.input, 4));
    const constructorArgs = decodedInputData[2];
    await runSuper({ address, constructorArguments: constructorArgs, libraries: {}, noCompile });
}
//# sourceMappingURL=verify-proxy.js.map