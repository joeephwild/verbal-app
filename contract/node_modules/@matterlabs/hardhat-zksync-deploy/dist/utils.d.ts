import { EthereumProvider, HardhatNetworkAccountsConfig, HardhatNetworkHDAccountsConfig, HardhatRuntimeEnvironment, HttpNetworkAccountsConfig, HttpNetworkConfig, NetworkConfig } from 'hardhat/types';
import { Wallet } from 'zksync-ethers';
import { ContractFullQualifiedName, ContractInfo, MissingLibrary } from './types';
export declare function isHttpNetworkConfig(networkConfig: NetworkConfig): networkConfig is HttpNetworkConfig;
export declare function updateHardhatConfigFile(hre: HardhatRuntimeEnvironment, externalConfigObjectPath: string, exportedConfigObject: string): void;
export declare function generateFullQuailfiedNameString(contractFQN: ContractFullQualifiedName | MissingLibrary): string;
export declare function fillLibrarySettings(hre: HardhatRuntimeEnvironment, libraries: ContractInfo[]): Promise<void>;
export declare function getLibraryInfos(hre: HardhatRuntimeEnvironment): MissingLibrary[];
export declare function removeLibraryInfoFile(hre: HardhatRuntimeEnvironment): void;
export declare function isValidEthNetworkURL(string: any): boolean;
export declare function compileContracts(hre: HardhatRuntimeEnvironment, contracts: string[]): Promise<void>;
export declare function isHardhatNetworkHDAccountsConfig(object: any): object is HardhatNetworkHDAccountsConfig;
export declare function isHardhatNetworkAccountsConfigStrings(object: any): object is string[];
export declare function isString(object: any): object is string;
export declare function isNumber(object: any): object is number;
export declare function getWalletsFromAccount(hre: HardhatRuntimeEnvironment, accounts: HardhatNetworkAccountsConfig | HttpNetworkAccountsConfig): Promise<Wallet[]>;
export declare function retrieveContractBytecode(address: string, provider: EthereumProvider): Promise<string>;
export declare function getConstructorArguments(constructorArgsParams: any[], constructorArgsModule?: string): Promise<any>;
export declare function extractModule(constructorArgsModulePath: string): Promise<any>;
//# sourceMappingURL=utils.d.ts.map