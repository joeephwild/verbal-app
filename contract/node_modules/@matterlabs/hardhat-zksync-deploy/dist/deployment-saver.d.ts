import { HardhatRuntimeEnvironment } from 'hardhat/types';
import { DeploymentType } from 'zksync-ethers/build/types';
import { ZkSyncArtifact } from './types';
export interface DeploymentEntry {
    constructorArgs: any[];
    salt: string;
    deploymentType: DeploymentType;
    factoryDeps: string[];
    address: string;
    txHash: string;
}
export interface EntryToFind {
    constructorArgs: any[];
    salt: string;
    deploymentType: DeploymentType;
    factoryDeps: string[];
}
export interface Deployment {
    contractName: string;
    sourceName: string;
    abi: {};
    bytecode: string;
    entries: DeploymentEntry[];
}
export declare const DEPLOYMENT_PATH: string;
export declare const CHAIN_ID_FILE: string;
export declare function saveCache(hre: HardhatRuntimeEnvironment, artifact: ZkSyncArtifact, deployEntry: DeploymentEntry): Promise<void>;
export declare function loadCache(hre: HardhatRuntimeEnvironment, artifact: ZkSyncArtifact, deploymentType: DeploymentType, constructorArgs: any[], salt: string, factoryDeps: string[]): Promise<DeploymentEntry | undefined>;
export declare function saveDeployment(hre: HardhatRuntimeEnvironment, deployment: Deployment): Promise<void>;
export declare function loadDeployment(hre: HardhatRuntimeEnvironment, artifact: ZkSyncArtifact): Promise<Deployment | undefined>;
export declare function addDeploymentEntry(hre: HardhatRuntimeEnvironment, deployment: Deployment, deploymentEntry: DeploymentEntry): Promise<void>;
export declare function loadDeploymentEntry(hre: HardhatRuntimeEnvironment, deployment: Deployment, deploymentForFound: DeploymentEntry | EntryToFind): Promise<DeploymentEntry | undefined>;
export declare function isDeploymentEntry(object: any): object is DeploymentEntry;
//# sourceMappingURL=deployment-saver.d.ts.map