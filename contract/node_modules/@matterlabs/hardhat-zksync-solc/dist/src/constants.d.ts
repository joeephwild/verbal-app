import { ZkSolcConfig } from './types';
export declare const PLUGIN_NAME = "@matterlabs/hardhat-zksync-solc";
export declare const ZK_ARTIFACT_FORMAT_VERSION = "hh-zksolc-artifact-1";
export declare const ZKSOLC_BIN_REPOSITORY = "https://github.com/matter-labs/zksolc-bin";
export declare const ZKVM_SOLC_BIN_REPOSITORY = "https://github.com/matter-labs/era-solidity";
export declare const DEFAULT_TIMEOUT_MILISECONDS = 30000;
export declare const DETECT_MISSING_LIBRARY_MODE_COMPILER_VERSION = "1.3.14";
export declare const USER_AGENT = "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36";
export declare const TASK_UPDATE_SOLIDITY_COMPILERS = "compile:update-solidity-compilers";
export declare const TASK_DOWNLOAD_ZKSOLC = "compile:zksolc:download";
export declare const ZKSOLC_COMPILER_PATH_VERSION = "local_or_remote";
export declare const defaultZkSolcConfig: ZkSolcConfig;
export declare const ZKSOLC_COMPILERS_SELECTOR_MAP: {
    '1.3.5': string[];
};
export declare const ZKSOLC_COMPILER_MIN_VERSION_WITH_FALLBACK_OZ = "1.3.21";
export declare const ZKSOLC_COMPILER_VERSION_MIN_VERSION = "1.3.13";
export declare const ZKSOLC_BIN_OWNER = "matter-labs";
export declare const ZKSOLC_BIN_REPOSITORY_NAME = "zksolc-bin";
export declare const ZKVM_SOLC_BIN_REPOSITORY_NAME = "era-solidity";
export declare const ZKVM_SOLC_COMPILER_VERSION_MIN_VERSION = "1.0.0";
export declare const ZKSOLC_COMPILER_MIN_VERSION_BREAKABLE_CHANGE = "1.5.0";
export declare const ZKSOLC_COMPILER_VERSION_MIN_VERSION_WITH_ZKVM_COMPILER = "1.3.22";
export declare const ZKVM_SOLC_DEFAULT_COMPILER_VERSION = "1.0.0";
export declare const DEFAULT_COMPILER_VERSION_INFO_CACHE_PERIOD: number;
export declare const COMPILER_VERSION_INFO_FILE_NOT_FOUND_ERROR = "Could not find zksolc compiler version info file.";
export declare const COMPILER_VERSION_RANGE_ERROR: (version: string, minVersion: string, latestVersion: string) => string;
export declare const COMPILER_VERSION_WARNING: (version: string, latestVersion: string) => string;
export declare const COMPILER_BINARY_CORRUPTION_ERROR: (compilerPath: string) => string;
export declare const COMPILING_INFO_MESSAGE: (zksolcVersion: string, solcVersion: string) => string;
export declare const COMPILING_INFO_MESSAGE_ZKVM_SOLC: (zksolcVersion: string, zkvmSolcVersion: string) => string;
export declare const COMPILER_BINARY_CORRUPTION_ERROR_ZKVM_SOLC: (compilerPath: string) => string;
export declare const COMPILER_ZKSOLC_VERSION_WITH_ZKVM_SOLC_WARN = "zkVm (eraVersion) compiler is supported only with usage of zksolc version >= 1.3.22. Switching by default to the native solc compiler.";
export declare const COMPILER_ZKSOLC_NEED_EVM_CODEGEN = "Yul codegen is only supported for solc >= 0.8. Flag forceEVMLA will automatically be set to true by default.";
export declare const COMPILER_ZKSOLC_IS_SYSTEM_USE = "isSystem flag is deprecated. Please use enableEraVMExtensions instead. Automatically switched to the new naming with the provided value.";
export declare const COMPILER_ZKSOLC_FORCE_EVMLA_USE = "forceEvmla flag is deprecated. Please use forceEVMLA instead. Automatically switched to the new naming with the provided value.";
export declare const ZKVM_SOLC_COMPILER_NEEDS_ERA_VERSION: (eraVersion: string, solcVersion: string) => string;
export declare const COMPILERS_CONFLICT_ZKVM_SOLC: (version: string) => string;
export declare const MISSING_LIBRARIES_NOTICE = "zksolc compiler detected missing libraries! For more details, visit: https://era.zksync.io/docs/tools/hardhat/compiling-libraries.html.";
export declare const COMPILE_AND_DEPLOY_LIBRARIES_INSTRUCTIONS = "To compile and deploy libraries, please run: `hardhat deploy-zksync:libraries`";
export declare const MISSING_LIBRARY_LINK = "For more details on how to use deploy-zksync:libraries task from hardhat-zksync-deploy plugin, visit: https://era.zksync.io/docs/tools/hardhat/hardhat-zksync-deploy.html.";
export declare const SOLCJS_EXECUTABLE_CODE = "#!/usr/bin/env node\n\"use strict\";var __createBinding=this&&this.__createBinding||(Object.create?function(e,t,r,o){void 0===o&&(o=r);var i=Object.getOwnPropertyDescriptor(t,r);i&&(\"get\"in i?t.__esModule:!i.writable&&!i.configurable)||(i={enumerable:!0,get:function(){return t[r]}}),Object.defineProperty(e,o,i)}:function(e,t,r,o){void 0===o&&(o=r),e[o]=t[r]}),__setModuleDefault=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,\"default\",{enumerable:!0,value:t})}:function(e,t){e.default=t}),__importStar=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var r in e)\"default\"!==r&&Object.prototype.hasOwnProperty.call(e,r)&&__createBinding(t,e,r);return __setModuleDefault(t,e),t},__importDefault=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(exports,\"__esModule\",{value:!0}),exports._loadCompilerSources=void 0;const os_1=__importDefault(require(\"os\")),fs_1=__importDefault(require(\"fs\")),path_1=__importDefault(require(\"path\"));function packageExists(e){try{return require.resolve(e),!0}catch(e){return!1}}function findPackagePath(e,t){let r=t,o=r+\"/node_modules/\"+e;for(;\"/\"!==r;){if(packageExists(o))return o;r=path_1.default.dirname(r),o=r+\"/node_modules/\"+e}}async function getSolc(e,t){var r=findPackagePath(\"solc/wrapper\",t);const{default:o}=await Promise.resolve().then(()=>__importStar(require(r)));return o(_loadCompilerSources(e))}function _loadCompilerSources(e){const t=module.constructor;if(void 0===t._extensions)return require(e);var r=t._extensions[\".js\"];t._extensions[\".js\"]=function(e,t){var r=fs_1.default.readFileSync(t,\"utf8\");Object.getPrototypeOf(e)._compile.call(e,r,t)};e=require(e);return t._extensions[\".js\"]=r,e}exports._loadCompilerSources=_loadCompilerSources;async function readStdin(){return new Promise(e=>{let t=\"\";process.stdin.on(\"data\",e=>t+=e),process.stdin.on(\"end\",()=>e(t))})}!async function(){var e;const t=await getSolc(\"SOLCJS_PATH\",\"WORKING_DIR\");process.argv.includes(\"--version\")?(e=await t.version(),process.stdout.write(\"solc, the solidity compiler commandline interface\"+os_1.default.EOL),process.stdout.write(\"Version: \"+e+os_1.default.EOL)):(e=await readStdin(),e=t.compile(e),process.stdout.write(e))}();";
//# sourceMappingURL=constants.d.ts.map