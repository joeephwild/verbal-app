"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.extractFactoryDeps = exports.loadArtifact = exports.deployContract = exports.getContractAtFromArtifact = exports.getContractAt = exports.getContractFactoryFromArtifact = exports.getContractFactory = exports.getImpersonatedSigner = exports.getWallets = exports.getWallet = void 0;
const zksync_ethers_1 = require("zksync-ethers");
const ethers = __importStar(require("ethers"));
const errors_1 = require("./errors");
const rich_wallets_1 = require("./rich-wallets");
const utils_1 = require("./utils");
const constants_1 = require("./constants");
async function getWallet(hre, privateKeyOrIndex) {
    const privateKey = (0, utils_1.isString)(privateKeyOrIndex) ? privateKeyOrIndex : undefined;
    const accountNumber = (0, utils_1.isNumber)(privateKeyOrIndex) ? privateKeyOrIndex : undefined;
    if (privateKey) {
        return new zksync_ethers_1.Wallet(privateKey, hre.zksyncEthers.providerL2).connectToL1(hre.zksyncEthers.providerL1);
    }
    const accounts = hre.network.config.accounts;
    const wallets = await (0, utils_1.getWalletsFromAccount)(hre, accounts);
    if (accountNumber && accountNumber >= wallets.length) {
        throw new errors_1.ZkSyncEthersPluginError('Account private key with specified index is not found');
    }
    if (wallets.length === 0) {
        throw new errors_1.ZkSyncEthersPluginError('Accounts are not configured for this network');
    }
    return wallets[accountNumber || 0];
}
exports.getWallet = getWallet;
async function getWallets(hre) {
    const accounts = hre.network.config.accounts;
    return await (0, utils_1.getWalletsFromAccount)(hre, accounts);
}
exports.getWallets = getWallets;
function _getSigners(hre) {
    const accounts = rich_wallets_1.richWallets.map((wallet) => wallet.address);
    const signersWithAddress = accounts.map((account) => getSigner(hre, account));
    return signersWithAddress;
}
function getSigner(hre, address) {
    return zksync_ethers_1.Signer.from(new zksync_ethers_1.Signer(hre.zksyncEthers.providerL2, address), hre.network.config.chainId);
}
async function getImpersonatedSigner(hre, address) {
    await hre.zksyncEthers.providerL2.send('hardhat_impersonateAccount', [address]);
    return getSigner(hre, address);
}
exports.getImpersonatedSigner = getImpersonatedSigner;
async function getContractFactory(hre, nameOrAbi, bytecodeOrFactoryOptions, wallet, deploymentType) {
    if (typeof nameOrAbi === 'string') {
        const artifact = await loadArtifact(hre, nameOrAbi);
        return getContractFactoryFromArtifact(hre, artifact, bytecodeOrFactoryOptions, deploymentType);
    }
    return getContractFactoryByAbiAndBytecode(hre, nameOrAbi, bytecodeOrFactoryOptions, wallet, deploymentType);
}
exports.getContractFactory = getContractFactory;
async function getContractFactoryFromArtifact(hre, artifact, walletOrOptions, deploymentType) {
    let wallet;
    if (!(0, utils_1.isArtifact)(artifact)) {
        throw new errors_1.ZkSyncEthersPluginError(`You are trying to create a contract factory from an artifact, but you have not passed a valid artifact parameter.`);
    }
    if ((0, utils_1.isFactoryOptions)(walletOrOptions)) {
        wallet = walletOrOptions.wallet;
    }
    else {
        wallet = walletOrOptions;
    }
    if (artifact.bytecode === '0x') {
        throw new errors_1.ZkSyncEthersPluginError(`You are trying to create a contract factory for the contract ${artifact.contractName}, which is abstract and can't be deployed.
If you want to call a contract using ${artifact.contractName} as its interface use the "getContractAt" function instead.`);
    }
    return getContractFactoryByAbiAndBytecode(hre, artifact.abi, artifact.bytecode, wallet, deploymentType);
}
exports.getContractFactoryFromArtifact = getContractFactoryFromArtifact;
async function getContractFactoryByAbiAndBytecode(hre, abi, bytecode, wallet, deploymentType) {
    if (!wallet) {
        wallet = await getWallet(hre);
    }
    return new zksync_ethers_1.ContractFactory(abi, bytecode, wallet, deploymentType);
}
async function getContractAt(hre, nameOrAbi, address, wallet) {
    if (typeof nameOrAbi === 'string') {
        const artifact = await loadArtifact(hre, nameOrAbi);
        return getContractAtFromArtifact(hre, artifact, address, wallet);
    }
    if (!wallet) {
        wallet = await getWallet(hre);
    }
    // If there's no signer, we want to put the provider for the selected network here.
    // This allows read only operations on the contract interface.
    const walletOrProvider = wallet !== undefined ? wallet : hre.zksyncEthers.providerL2;
    return new zksync_ethers_1.Contract(address, nameOrAbi, walletOrProvider);
}
exports.getContractAt = getContractAt;
async function getContractAtFromArtifact(hre, artifact, address, wallet) {
    if (!(0, utils_1.isArtifact)(artifact)) {
        throw new errors_1.ZkSyncEthersPluginError(`You are trying to create a contract by artifact, but you have not passed a valid artifact parameter.`);
    }
    if (!wallet) {
        wallet = await getWallet(hre);
    }
    let contract = new zksync_ethers_1.Contract(address, artifact.abi, wallet);
    if (contract.runner === null) {
        contract = contract.connect(hre.zksyncEthers.providerL2);
    }
    return contract;
}
exports.getContractAtFromArtifact = getContractAtFromArtifact;
async function deployContract(hre, artifact, constructorArguments, wallet, overrides, additionalFactoryDeps) {
    if (!wallet) {
        wallet = await getWallet(hre);
    }
    const factory = await getContractFactoryFromArtifact(hre, artifact, wallet);
    const baseDeps = await extractFactoryDeps(hre, artifact);
    const additionalDeps = additionalFactoryDeps ? additionalFactoryDeps.map((val) => ethers.hexlify(val)) : [];
    const factoryDeps = [...baseDeps, ...additionalDeps];
    const { customData, ..._overrides } = overrides ?? {};
    // Encode and send the deploy transaction providing factory dependencies.
    const contract = await factory.deploy(...constructorArguments, {
        ..._overrides,
        customData: {
            ...customData,
            salt: ethers.ZeroHash,
            factoryDeps,
        },
    });
    await contract.waitForDeployment();
    return contract;
}
exports.deployContract = deployContract;
async function loadArtifact(hre, contractNameOrFullyQualifiedName) {
    const artifact = await hre.artifacts.readArtifact(contractNameOrFullyQualifiedName);
    // Verify that this artifact was compiled by the zkSync compiler, and not `solc` or `vyper`.
    if (artifact._format !== constants_1.ZKSOLC_ARTIFACT_FORMAT_VERSION && artifact._format !== constants_1.ZKVYPER_ARTIFACT_FORMAT_VERSION) {
        throw new errors_1.ZkSyncEthersPluginError(`Artifact ${contractNameOrFullyQualifiedName} was not compiled by zksolc or zkvyper`);
    }
    return artifact;
}
exports.loadArtifact = loadArtifact;
async function extractFactoryDeps(hre, artifact) {
    const visited = new Set();
    visited.add(`${artifact.sourceName}:${artifact.contractName}`);
    return await extractFactoryDepsRecursive(hre, artifact, visited);
}
exports.extractFactoryDeps = extractFactoryDeps;
async function extractFactoryDepsRecursive(hre, artifact, visited) {
    // Load all the dependency bytecodes.
    // We transform it into an array of bytecodes.
    const factoryDeps = [];
    for (const dependencyHash in artifact.factoryDeps) {
        if (!dependencyHash)
            continue;
        const dependencyContract = artifact.factoryDeps[dependencyHash];
        if (!visited.has(dependencyContract)) {
            const dependencyArtifact = await loadArtifact(hre, dependencyContract);
            factoryDeps.push(dependencyArtifact.bytecode);
            visited.add(dependencyContract);
            const transitiveDeps = await extractFactoryDepsRecursive(hre, dependencyArtifact, visited);
            factoryDeps.push(...transitiveDeps);
        }
    }
    return factoryDeps;
}
//# sourceMappingURL=helpers.js.map