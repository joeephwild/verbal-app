export declare const PLUGIN_NAME = "@matterlabs/hardhat-zksync-verify";
export declare const TESTNET_VERIFY_URL = "https://explorer.sepolia.era.zksync.dev/contract_verification";
export declare const TASK_COMPILE = "compile";
export declare const TASK_VERIFY = "verify";
export declare const TASK_VERIFY_VERIFY = "verify:verify";
export declare const TASK_VERIFY_CONTRACT = "zk:verify:contract";
export declare const TASK_CHECK_VERIFICATION_STATUS = "verify-status";
export declare const TASK_VERIFY_GET_CONSTRUCTOR_ARGUMENTS = "verify:get-constructor-arguments";
export declare const TASK_VERIFY_GET_LIBRARIES = "verify:get-libraries";
export declare const TASK_VERIFY_GET_COMPILER_VERSIONS = "verify:get-compiler-versions";
export declare const TASK_VERIFY_GET_MINIMUM_BUILD = "verify:get-minimum-build";
export declare const TASK_VERIFY_VERIFY_MINIMUM_BUILD = "zk:verify:verify-minimum-build";
export declare const TASK_VERIFY_GET_CONTRACT_INFORMATION = "verify:get-contract-information";
export declare const USING_COMPILER_PATH_ERROR = "Using a compilerPath in the setting without compile is not supported. Please run verify without --no-compile flag or specify a official compiler version.";
export declare const CONST_ARGS_ARRAY_ERROR = "\nWrong constructor arguments format:\n\nIf your constructor arguments are not encoded, they should be passed as an array parameter. E.g:\n  await run(\"verify:verify\", {\n    <other args>,\n    constructorArguments: [arg1, arg2, ...]\n  };\n\nIf your constructor has no arguments pass an empty array. E.g:\n  await run(\"verify:verify\", {\n    <other args>,\n    constructorArguments: []\n  };\n  \nIf your constructor arguments are already encoded, they should be passed as a non-array constructorArgs parameter. E.g:\n  await run(\"verify:verify\", {\n    <other args>,\n    constructorArguments: encodedConstructorArguments\n  };\n\n  Please refer to the documentation page for more info: https://era.zksync.io/docs/tools/hardhat/hardhat-zksync-verify.html\n";
export declare const BUILD_INFO_NOT_FOUND_ERROR: (contractFQN: string) => string;
export declare const LIBRARIES_EXPORT_ERROR: (librariesModulePath: string) => string;
export declare const ENCODED_ARAGUMENTS_NOT_FOUND_ERROR: (constructorArgsModulePath: string) => string;
export declare const CONSTRUCTOR_MODULE_IMPORTING_ERROR: (errorMessage: string) => string;
export declare const NO_VERIFIABLE_ADDRESS_ERROR = "You did not provide any address. Please re-run the 'verify' task with the address of the contract you want to verify.";
export declare const NO_MATCHING_CONTRACT = "The address provided as argument contains a contract, but its bytecode doesn't match any of your local contracts.\n\n      Possible causes are:\n        - Contract code changed after the deployment was executed. This includes code for seemingly unrelated contracts.\n        - A solidity file was added, moved, deleted or renamed after the deployment was executed. This includes files for seemingly unrelated contracts.\n        - Solidity compiler settings were modified after the deployment was executed (like the optimizer, target EVM, etc.).\n        - The given address is wrong.\n        - The selected network is wrong.";
export declare const MULTIPLE_MATCHING_CONTRACTS = "More than one contract was found to match the deployed bytecode.\n      Please use the contract parameter with one of the contracts:\n\n      For example:\n\n        hardhat verify --contract contracts/Example.sol:ExampleContract <other args>\n\n      If you are running the verify subtask from within Hardhat instead:\n\n        await run(\"verify:verify\", {\n          <other args>,\n          contract: \"contracts/Example.sol:ExampleContract\"\n        };";
export declare const CONTRACT_NAME_NOT_FOUND = "You did not provide any contract name. Please add fully qualified name of your contract. \nQualified names look like this: contracts/AContract.sol:TheContract";
export declare const COMPILER_VERSION_NOT_SUPPORTED = "Solidity compiler you used to compile the contract is not currently supported by ZKsync block explorer!\nPlease use one of the supporting versions";
export declare const WRONG_CONSTRUCTOR_ARGUMENTS = "types/values length mismatch";
export declare const PENDING_CONTRACT_INFORMATION_MESSAGE: (verificationId: number) => string;
export declare const SINGLE_FILE_CODE_FORMAT = "solidity-single-file";
export declare const JSON_INPUT_CODE_FORMAT = "solidity-standard-json-input";
export declare const UNSUCCESSFUL_CONTEXT_COMPILATION_MESSAGE = "Compiling your contract excluding unrelated contracts did not produce identical bytecode.\nTrying again with the full solc input used to compile and deploy it.\nThis means that unrelated contracts may be displayed on the zksync block explorer.\n";
export declare const COMPILERS_CONFLICT_ZKVM_SOLC: (version: string) => string;
export declare const COMPILATION_ERRORS: {
    error: string;
    pattern: RegExp;
}[];
//# sourceMappingURL=constants.d.ts.map