import { HardhatRuntimeEnvironment, RunSuperFunction, TaskArguments } from 'hardhat/types';
export declare function verify(args: {
    address: string;
    constructorArgs: string;
    contract: string;
    constructorArgsParams: any[];
    libraries: string;
    noCompile: boolean;
}, hre: HardhatRuntimeEnvironment, runSuper: RunSuperFunction<TaskArguments>): Promise<any>;
export declare function getCompilerVersions(_: TaskArguments, hre: HardhatRuntimeEnvironment, runSuper: RunSuperFunction<TaskArguments>): Promise<string[]>;
export declare function getConstructorArguments(args: any, hre: HardhatRuntimeEnvironment, runSuper: RunSuperFunction<TaskArguments>): Promise<any>;
export declare function verifyContract({ address, contract: contractFQN, constructorArguments, libraries, noCompile }: TaskArguments, hre: HardhatRuntimeEnvironment, runSuper: RunSuperFunction<TaskArguments>): Promise<number>;
export declare function getContractInfo({ contractFQN, deployedBytecode, matchingCompilerVersions, libraries }: TaskArguments, hre: HardhatRuntimeEnvironment, runSuper: RunSuperFunction<TaskArguments>): Promise<any>;
//# sourceMappingURL=task-actions.d.ts.map