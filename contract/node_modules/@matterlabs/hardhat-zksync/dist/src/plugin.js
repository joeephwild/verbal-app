"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.upgradeProxyAndVerify = exports.upgradeBeaconAndVerify = exports.deployProxyAndVerify = exports.deployBeaconAndVerify = exports.deployContractAndVerify = void 0;
const constants_1 = require("@matterlabs/hardhat-zksync-verify/dist/src/constants");
async function deployContractAndVerify(hre, runSuper, taskArgs) {
    const contract = await runSuper(taskArgs);
    if (taskArgs.verify) {
        const artifact = await hre.deployer.loadArtifact(taskArgs.contractName);
        await hre.run(constants_1.TASK_VERIFY, {
            contract: `${artifact.sourceName}:${artifact.contractName}`,
            address: await contract.getAddress(),
            constructorArgsParams: taskArgs.constructorArgsParams,
            constructorArgs: taskArgs.constructorArgs,
            noCompile: true,
        });
    }
    return contract;
}
exports.deployContractAndVerify = deployContractAndVerify;
async function deployBeaconAndVerify(hre, runSuper, taskArgs) {
    const { proxy, beacon } = await runSuper(taskArgs);
    if (taskArgs.verify) {
        await hre.run(constants_1.TASK_VERIFY, {
            address: await proxy.getAddress(),
            noCompile: true,
        });
    }
    return { proxy, beacon };
}
exports.deployBeaconAndVerify = deployBeaconAndVerify;
async function deployProxyAndVerify(hre, runSuper, taskArgs) {
    const proxy = await runSuper(taskArgs);
    if (taskArgs.verify) {
        await hre.run(constants_1.TASK_VERIFY, {
            address: await proxy.getAddress(),
            noCompile: true,
        });
    }
    return proxy;
}
exports.deployProxyAndVerify = deployProxyAndVerify;
async function upgradeBeaconAndVerify(hre, runSuper, taskArgs) {
    const proxy = await runSuper(taskArgs);
    if (taskArgs.verify) {
        await hre.run(constants_1.TASK_VERIFY, {
            address: await proxy.getAddress(),
            noCompile: true,
        });
    }
    return proxy;
}
exports.upgradeBeaconAndVerify = upgradeBeaconAndVerify;
async function upgradeProxyAndVerify(hre, runSuper, taskArgs) {
    const proxy = await runSuper(taskArgs);
    if (taskArgs.verify) {
        await hre.run(constants_1.TASK_VERIFY, {
            address: await proxy.getAddress(),
            noCompile: true,
        });
    }
    return proxy;
}
exports.upgradeProxyAndVerify = upgradeProxyAndVerify;
//# sourceMappingURL=plugin.js.map